# -*- coding: utf-8 -*-
"""Loan Prediction using ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Q5xzhFq-SLBvb3CRwd1P9MnBRx2jqJQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from math import pi
import seaborn as sns

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

loan_train = pd.read_csv('train_u6lujuX_CVtuZ9i.csv')
loan_test = pd.read_csv('test_Y3wMUE5_7gLdaTN.csv')

loan_train.head()

loan_test.head()

loan_train.columns

loan_test.columns

loan_train.dtypes

loan_train.describe()

len(loan_train)

len(loan_test)

loan_train.isna().values.any()

loan_test.isna().values.any()

loan_train.isna().sum()

loan_train.isna().sum().plot(kind="bar")
plt.show()

loan_train['Credit_History'].fillna(method='ffill',inplace=True)
loan_train['Credit_History'].isna().values.any()

median_LAT = loan_train['Loan_Amount_Term'].median()
median_LAT

loan_train['Loan_Amount_Term'].fillna((median_LAT),inplace=True)
loan_train['Loan_Amount_Term'].isna().values.any()

loan_train['Self_Employed'].value_counts()

loan_train['Self_Employed'].fillna('No',inplace=True)
loan_train['Self_Employed'].isna().values.any()

loan_train['Dependents'].fillna(0,inplace=True)
loan_train['Dependents'].isna().values.any()

loan_train['Married'].mode()

loan_train['Married'].fillna('Yes',inplace=True)
loan_train['Married'].isna().values.any()

loan_train['Gender'].mode()

loan_train['Gender'].fillna('Male',inplace=True)
loan_train['Gender'].isna().values.any()

median_LA = loan_train['LoanAmount'].median()
median_LA

loan_train['LoanAmount'].fillna((median_LA),inplace=True)
loan_train['LoanAmount'].isna().values.any()

loan_train.isna().sum()

loan_test.isna().sum()

loan_test['Credit_History'].fillna(method='ffill',inplace=True)
loan_test['Credit_History'].isna().values.any()

median_LAT = loan_test['Loan_Amount_Term'].median()
loan_test['Loan_Amount_Term'].fillna((median_LAT),inplace=True)
loan_test['Loan_Amount_Term'].isna().values.any()

median_LA = loan_test['LoanAmount'].median()
loan_test['LoanAmount'].fillna((median_LA),inplace=True)
loan_test['LoanAmount'].isna().values.any()

loan_test['Self_Employed'].fillna('No',inplace=True)
loan_test['Self_Employed'].isna().values.any()

loan_test['Dependents'].fillna(0,inplace=True)
loan_test['Dependents'].isna().values.any()

loan_test['Gender'].fillna('Male',inplace=True)
loan_test['Gender'].isna().values.any()

loan_test.isna().sum()

loan_test.duplicated().values.any()

loan_train.duplicated().values.any()

loan_train.head()

fig,ax = plt.subplots(3,2,figsize=(16,18))

loan_train.groupby(['Gender'])[['Gender']].count().plot.bar(color=plt.cm.Paired(np.arange(len(loan_train))),ax=ax[0,0])
loan_train.groupby(['Married'])[['Married']].count().plot.bar(color=plt.cm.Paired(np.arange(len(loan_train))),ax=ax[0,1])
loan_train.groupby(['Education'])[['Education']].count().plot.bar(color=plt.cm.Paired(np.arange(len(loan_train))),ax=ax[1,0])
loan_train.groupby(['Self_Employed'])[['Self_Employed']].count().plot.bar(color=plt.cm.Paired(np.arange(len(loan_train))),ax=ax[1,1])
loan_train.groupby(['Property_Area'])[['Property_Area']].count().plot.bar(color=plt.cm.Paired(np.arange(len(loan_train))),ax=ax[2,0])
loan_train.groupby(['Loan_Status'])[['Loan_Status']].count().plot.bar(color=plt.cm.Paired(np.arange(len(loan_train))),ax=ax[2,1])

plt.show()

categorical_columns = loan_train.select_dtypes('object').columns.to_list()

categorical_columns[1:]

for i in categorical_columns[1:]:
    plt.figure(figsize=(4,5))
    sns.countplot(x=i,hue='Loan_Status',data=loan_train,palette='ocean')
    plt.xlabel(i,fontsize=14)

fig,ax = plt.subplots(2,2, figsize=(14,12))

sns.scatterplot(data=loan_train,x="ApplicantIncome",y="LoanAmount",s=70,hue="Loan_Status",palette='ocean',ax=ax[0,0])
sns.distplot(loan_train['LoanAmount'],bins=70,ax=ax[0,1])
sns.scatterplot(data=loan_train,x="CoapplicantIncome",y="LoanAmount",s=70,hue="Loan_Status",palette='ocean',ax=ax[1,0])
sns.scatterplot(data=loan_train,x="Loan_Amount_Term",y="LoanAmount",s=70,hue="Loan_Status",palette='ocean',ax=ax[1,1])

plt.show()

loan_train.corr()

fig,ax = plt.subplots(figsize=(9,7))
correlations = loan_train.corr()
sns.heatmap(correlations,cmap="YlGnBu",annot=True)
plt.show()

loan_train.head()

objectlist_train = loan_train.select_dtypes(include="object").columns

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

for feature in objectlist_train:
    loan_train[feature]=le.fit_transform(loan_train[feature].astype(str))
print(loan_train.info())

objectlist_test = loan_test.select_dtypes(include="object").columns

for feature in objectlist_test:
    loan_test[feature]=le.fit_transform(loan_test[feature].astype(str))
print(loan_test.info())

fig,ax = plt.subplots(figsize=(10,8))
correlations_ML = loan_train.corr()

sns.heatmap(correlations_ML,cmap="YlGnBu",annot=True)
plt.show()

x = loan_train.drop('Loan_Status',axis=1)
y = loan_train['Loan_Status']

train_x,test_x,train_y,test_y = train_test_split(x,y,test_size=0.30,random_state=0)

df_model = DecisionTreeClassifier()
df_model.fit(train_x,train_y)
predict_y = df_model.predict(test_x)
print(classification_report(test_y,predict_y))
print("Accuracy:",accuracy_score(predict_y,test_y))

rf_model = RandomForestClassifier(n_estimators=100)
rf_model.fit(train_x,train_y)
predict_y2 = rf_model.predict(test_x)
print(classification_report(test_y,predict_y2))
print("Accuracy:",accuracy_score(predict_y2,test_y))

lr_model = LogisticRegression(solver='lbfgs',max_iter=100,multi_class='auto')
lr_model.fit(train_x,train_y)
predict_y3 = lr_model.predict(test_x)
print(classification_report(test_y,predict_y3))
print("Accuracy:",accuracy_score(predict_y3,test_y))

